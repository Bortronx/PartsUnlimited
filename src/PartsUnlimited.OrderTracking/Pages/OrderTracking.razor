@page "/order-tracking/{OrderId:int}"
@using System.ComponentModel.DataAnnotations
@using System.Threading
@implements IDisposable
@inject IOrdersClient OrdersClient

<section>
    @if (invalidOrder)
    {
        <h2>Invalid order</h2>
        <p>Sorry, this order could not be loaded</p>
        <a class="btn" href="find-order">Find an order</a>
    }
    else if (orderWithStatus == null)
    {
        <h2>Order @OrderId</h2>
        <h4>Loading...</h4>
    }
    else
    {
        <h2>Order @OrderId</h2>
        <div class="row">
            <div class="col-md-4">
                <h4>Shipping address</h4>

                <div>
                    @orderWithStatus.Order.Name<br>
                    @orderWithStatus.Order.Address<br>
                    @orderWithStatus.Order.City, @orderWithStatus.Order.State @orderWithStatus.Order.PostalCode
                    @orderWithStatus.Order.Country
                </div>
            </div>
            <div class="col-md-8">
                <h5>Status: @orderWithStatus.StatusUpdates.LastOrDefault()?.StatusText</h5>

                <div>
                    @if (orderWithStatus.IsDelivered)
                    {
                        <text>Delivered:</text>
                    }
                    else
                    {
                        <text>Expected delivery date:</text>
                    }
                    @orderWithStatus.ExpectedDeliveryDate.ToShortDateString()
                </div>

                <h4>Status history</h4>
                <table class="table table-striped">
                    <tr>
                        <td>@orderWithStatus.Order.OrderDate.ToShortDateString() at @orderWithStatus.Order.OrderDate.ToShortTimeString()</td>
                        <td>Order placed</td>
                    </tr>
                    @foreach (var statusUpdate in orderWithStatus.StatusUpdates)
                    {
                        <tr>
                            <td>@statusUpdate.TimeStamp.ToShortDateString() at @statusUpdate.TimeStamp.ToShortTimeString()</td>
                            <td>@statusUpdate.StatusText</td>
                        </tr>
                    }
                </table>

                <a class="btn" href="@($"Orders/Details/{orderWithStatus.Order.OrderId}")">Order details</a>
            </div>
        </div>
    }
</section>

@code {
    OrderWithStatus orderWithStatus;
    CancellationTokenSource pollingCancellationToken;
    bool invalidOrder;

    [Parameter]
    public int OrderId { get; set; }

    protected override void OnParametersSet()
    {
        // If we were already polling for a different order, stop doing so
        pollingCancellationToken?.Cancel();

        // Start a new poll loop
        PollForUpdates(OrderId);
    }

    private async void PollForUpdates(int orderId)
    {
        invalidOrder = false;
        pollingCancellationToken = new CancellationTokenSource();
        while (!pollingCancellationToken.IsCancellationRequested)
        {
            try
            {
                orderWithStatus = await OrdersClient.GetOrder(orderId);
                StateHasChanged();

                if (orderWithStatus.IsDelivered)
                {
                    pollingCancellationToken.Cancel();
                }
                else
                {
                    await Task.Delay(4000);
                }
            }
            catch (Exception ex)
            {
                invalidOrder = true;
                pollingCancellationToken.Cancel();
                Console.WriteLine(ex.Message);
                StateHasChanged();
            }
        }
    }

    void IDisposable.Dispose()
    {
        pollingCancellationToken?.Cancel();
    }
}
